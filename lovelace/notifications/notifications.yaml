type: vertical-stack
cards:
## RED
  - type: conditional
    conditions:
      - entity: plant.one
        state: problem
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: plant.one
            - icon: sprout-outline
            - name: "[[[ return `${states['plant.one'].attributes.friendly_name} has a problem with ${states['plant.one'].attributes.problem}` ]]]"
            - card_color: rgba(255, 0, 0, 0.5)
  - type: conditional
    conditions:
      - entity: sensor.monitor_living_room
        state_not: 'online'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: sensor.monitor_living_room
            - icon: reload
            - name: "Monitor Living Room Offline. Press to restart"
            - card_color: rgba(255, 0, 0, 0.8)
            - tap_action: 
                action: call-service
                service: browser_mod.command
                service_data:
                  command: popup
                  title: Monitor
                  card:
                    type: entities
                    entities:
                      - type: call-service
                        icon: mdi:reload
                        name: Restart Monitor Services
                        service: mqtt.publish
                        service_data:
                          topic: monitor/scan/restart
                  deviceID:
                    - this
                haptic: heavy
            - hold_action: 
                action: call-service
                service: browser_mod.command
                service_data:
                  command: popup
                  title: Monitor
                  card:
                    type: entities
                    entities:
                      - type: call-service
                        icon: mdi:reload
                        name: Restart Monitor Services
                        service: mqtt.publish
                        service_data:
                          topic: monitor/scan/restart
                  deviceID:
                    - this
                haptic: heavy
  - type: conditional
    conditions:
      - entity: binary_sensor.ring_low_battery
        state: 'on'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - icon: alert
            - name: "[[[ return `Ring Doorbell has ${states['sensor.ring_doorbell_battery'].state} % battery left.` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)
  - type: conditional
    conditions:
      - entity: sensor.monitor_dining_room
        state_not: 'online'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: sensor.monitor_dining_room
            - icon: reload
            - name: "Monitor Dining Room Offline. Press to restart"
            - card_color: rgba(255, 0, 0, 0.8)
            - tap_action: 
                action: call-service
                service: browser_mod.command
                service_data:
                  command: popup
                  title: Monitor
                  card:
                    type: entities
                    entities:
                      - type: call-service
                        icon: mdi:reload
                        name: Restart Monitor Services
                        service: mqtt.publish
                        service_data:
                          topic: monitor/scan/restart
                  deviceID:
                    - this
                haptic: heavy
            - hold_action: 
                action: call-service
                service: browser_mod.command
                service_data:
                  command: popup
                  title: Monitor
                  card:
                    type: entities
                    entities:
                      - type: call-service
                        icon: mdi:reload
                        name: Restart Monitor Services
                        service: mqtt.publish
                        service_data:
                          topic: monitor/scan/restart
                  deviceID:
                    - this
                haptic: heavy


  - type: conditional
    conditions:
      - entity: sensor.smhialert
        state_not: 'No Alerts'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: sensor.smhialert
            - icon: alert
            - name: "[[[ return `${states['sensor.smhialert'].attributes.messages['025'].msgs[0].event}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)
            - tap_action: 
                action: call-service
                service: browser_mod.command
                service_data:
                  command: popup
                  title: SMHI Alert
                  card:
                    type: 'custom:smhialert-card'
                    entity: sensor.smhialert
                    title: " "
                  deviceID:
                    - this
                haptic: heavy


  - type: conditional
    conditions:
      - entity: sensor.krisinformation_stockholm
        state: 'Alert'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - icon: alert
            - name: 'VMA in Stockholm: https://www.krisinformation.se/'
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.back_door_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.back_door_open
            - icon: alert
            - name: "[[[ return `${states['alert.back_door_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.backyard_door_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.backyard_door_open
            - icon: alert
            - name: "[[[ return `${states['alert.backyard_door_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.balcony_door_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.balcony_door_open
            - icon: alert
            - name: "[[[ return `${states['alert.balcony_door_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.balcony_door_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.balcony_door_open
            - icon: alert
            - name: "[[[ return `${states['alert.balcony_door_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.front_door_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.front_door_open
            - icon: alert
            - name: "[[[ return `${states['alert.front_door_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: alert.dining_room_window_open
        state_not: 'idle'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - entity: alert.dining_room_window_open
            - icon: alert
            - name: "[[[ return `${states['alert.dining_room_window_open'].attributes.friendly_name}` ]]]"
            - card_color: rgba(255, 0, 0, 0.8)

  - type: conditional
    conditions:
      - entity: vacuum.roborock
        state: 'error'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - icon: robot-vacuum
            - name: "Roborock has an error!"
            - card_color: rgba(255, 0, 0, 0.8)


## YELLOW


## GREEN

  - type: conditional
    conditions:
      - entity: vacuum.roborock
        state: 'cleaning'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - icon: robot-vacuum
            - name: "[[[ return `Roborock has vacuumed ${states['vacuum.roborock'].attributes.cleaned_area} mÂ² in ${states['vacuum.roborock'].attributes.cleaning_time} minutes` ]]]"
            - card_color: rgba(0, 255, 0, 0.8)

## BLUE

  - type: conditional
    conditions:
      - entity: sensor.hacs
        state_not: '0'
    card:
      type: horizontal-stack
      cards:
        - type: custom:decluttering-card
          template: notification_template
          variables:
            - icon: home-assistant
            - name: "[[[ return `${states['sensor.hacs'].state} updates in HACS` ]]]"
            - card_color: rgba(0, 161, 255, 0.8)
            - tap_action: 
                action: navigate
                navigation_path: /hacs
                haptic: heavy